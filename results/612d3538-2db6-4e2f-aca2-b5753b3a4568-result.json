{"name": "To check google dlp can detect the mac address info type ae:aa:c2:50:43:8b", "status": "failed", "statusDetails": {"message": "AssertionError: AssertionError('\\x1b[93m\n  \n  assert_expectations() called at\\x1b[0m\n  \\x1b[4m\\x1b[94m\"/home/nitin-singh/PycharmProjects/...s()\n  \\t\\x1b[1m\\x1b[4mErrorMessage:\\x1b[0m\\x1b[91m\\tNone\\x1b[0m\n              expect(\"MAC_ADDRESS\" in info_type_list)\n  ')\nassert False", "trace": "mac_address = 'ae:aa:c2:50:43:8b'\n\n    @allure.title(\"To check google dlp can detect the mac address info type {mac_address}\")\n    @pytest.mark.parametrize(\"mac_address\", mac_address_list)\n    def test_check_google_dlp_can_detect_mac_address(mac_address):\n        try:\n            response = DLPDataService.post_dlp_data_service(mac_address)\n            log_response_data.from_reponse('Google_DLP_Service', response)\n            if response.status_code == 200:\n                logger.info(f'Google_DLP_Service response code is 200 and response is {response.text}')\n                # get the json response from the api\n                json_response = response.json()\n                info_type_list, likelihood_list = response_to_list.get_data_list(json_response)\n                expect(\"MAC_ADDRESS\" in info_type_list)\n                expect(\"UNLIKELY\" in likelihood_list)\n>               assert_expectations()\n\ntest/test_mac_address_infotype.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001b[93m\nE           \nE           assert_expectations() called at\u001b[0m\nE           \u001b[4m\u001b[94m\"/home/nitin-singh/PycharmProjects/DLPTest/test/test_mac_address_infotype.py:25\"\u001b[0m\u001b[93m in test_check_google_dlp_can_detect_mac_address()\nE           \nE           \u001b[91m\u001b[4mFailed Expectations : 1\nE           \u001b[0m\nE           1: \u001b[91mFailed at \"\u001b[0m\u001b[94m\u001b[4m/home/nitin-singh/PycharmProjects/DLPTest/test/test_mac_address_infotype.py:23\u001b[0m\u001b[91m\", in test_check_google_dlp_can_detect_mac_address()\nE           \t\u001b[1m\u001b[4mErrorMessage:\u001b[0m\u001b[91m\tNone\u001b[0m\nE                       expect(\"MAC_ADDRESS\" in info_type_list)\n\nvenv/lib/python3.8/site-packages/delayed_assert/delayed_assert.py:74: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nmac_address = 'ae:aa:c2:50:43:8b'\n\n    @allure.title(\"To check google dlp can detect the mac address info type {mac_address}\")\n    @pytest.mark.parametrize(\"mac_address\", mac_address_list)\n    def test_check_google_dlp_can_detect_mac_address(mac_address):\n        try:\n            response = DLPDataService.post_dlp_data_service(mac_address)\n            log_response_data.from_reponse('Google_DLP_Service', response)\n            if response.status_code == 200:\n                logger.info(f'Google_DLP_Service response code is 200 and response is {response.text}')\n                # get the json response from the api\n                json_response = response.json()\n                info_type_list, likelihood_list = response_to_list.get_data_list(json_response)\n                expect(\"MAC_ADDRESS\" in info_type_list)\n                expect(\"UNLIKELY\" in likelihood_list)\n                assert_expectations()\n    \n                logger.info(\n                    f\"To check google dlp can detect the mac address info type {mac_address} test case is passed \")\n    \n        except Exception as e:\n            logger.error(e)\n            logger.error(\n                f\"To check google dlp can detect the mac address info type {mac_address} test case is Failed \")\n    \n>           assert False, e\nE           AssertionError: AssertionError('\\x1b[93m\nE             \nE             assert_expectations() called at\\x1b[0m\nE             \\x1b[4m\\x1b[94m\"/home/nitin-singh/PycharmProjects/...s()\nE             \\t\\x1b[1m\\x1b[4mErrorMessage:\\x1b[0m\\x1b[91m\\tNone\\x1b[0m\nE                         expect(\"MAC_ADDRESS\" in info_type_list)\nE             ')\nE           assert False\n\ntest/test_mac_address_infotype.py:35: AssertionError"}, "steps": [{"name": "Calling Google DLP POSTS API with id: 'ae:aa:c2:50:43:8b' ", "status": "passed", "steps": [{"name": "Getting the base url for api", "status": "passed", "start": 1630873783909, "stop": 1630873783910}, {"name": "Log request Data for service 'Google DLP Service'", "status": "passed", "parameters": [{"name": "url", "value": "'https://dlp.googleapis.com/v2/projects/qe-assignment/content:inspect?key=AIzaSyBwdXHzGzCuPmlNzN2VQUl_g5ILsqBZW6g'"}, {"name": "header", "value": "{'Content-Type': 'application/json', 'charset': 'UTF-8'}"}, {"name": "service_name", "value": "'Google DLP Service'"}], "start": 1630873783910, "stop": 1630873783910}, {"name": "reading the json from file : 'DLP_Post.json' with dictionary: {'text': 'ae:aa:c2:50:43:8b'}", "status": "passed", "parameters": [{"name": "filename", "value": "'DLP_Post.json'"}, {"name": "d", "value": "{'text': 'ae:aa:c2:50:43:8b'}"}], "start": 1630873783911, "stop": 1630873783911}], "parameters": [{"name": "text", "value": "'ae:aa:c2:50:43:8b'"}], "start": 1630873783909, "stop": 1630873784400}, {"name": "Log response Data for service 'Google_DLP_Service'", "status": "passed", "parameters": [{"name": "service_name", "value": "'Google_DLP_Service'"}, {"name": "response", "value": "<Response [200]>"}], "start": 1630873784400, "stop": 1630873784401}, {"name": "Create the Likelihood List and Info Type List from the json data {'result': {'findings': [{'infoType': {'name': 'MAC_ADDRESS_LOCAL'}, 'likelihood': 'UNLIKELY', 'location': {'byteRange': {'end': '17'}, 'codepointRange': {'end': '17'}}, 'createTime': '2021-09-05T20:29:44.368Z', 'findingId': '2021-09-05T20:29:44.377451Z7014661695262735515'}]}}", "status": "passed", "parameters": [{"name": "reponse_json_data", "value": "{'result': {'findings': [{'infoType': {'name': 'MAC_ADDRESS_LOCAL'}, 'likelihood': 'UNLIKELY', 'location': {'byteRange': {'end': '17'}, 'codepointRange': {'end': '17'}}, 'createTime': '2021-09-05T20:29:44.368Z', 'findingId': '2021-09-05T20:29:44.377451Z7014661695262735515'}]}}"}], "start": 1630873784402, "stop": 1630873784402}], "attachments": [{"name": "log", "source": "a21c53b2-b8cd-45d3-b635-61405ddcdc1d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "mac_address", "value": "'ae:aa:c2:50:43:8b'"}], "start": 1630873783909, "stop": 1630873784411, "uuid": "6b6f6f18-53a8-4a85-a967-c21baddd50bf", "historyId": "8223c2c5834d5189eb2a772fb25cd593", "testCaseId": "3acc801c1bb0ea0015ed8fea386cbbc7", "fullName": "test.test_mac_address_infotype#test_check_google_dlp_can_detect_mac_address", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_mac_address_infotype"}, {"name": "host", "value": "LPBR394-NITINSINGH"}, {"name": "thread", "value": "18188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_mac_address_infotype"}]}