{"name": "To check google dlp can detect the Full Name in the text for name Jane Nelson", "status": "failed", "statusDetails": {"message": "AssertionError: AssertionError('\\x1b[93m\n  \n  assert_expectations() called at\\x1b[0m\n  \\x1b[4m\\x1b[94m\"/home/nitin-singh/PycharmProjects/...\\x1b[91m\\tNone\\x1b[0m\n              expect(json_response[\\'result\\'][\\'findings\\'][0][\\'likelihood\\'] == \"POSSIBLE\")\n  ')\nassert False", "trace": "full_name = 'Jane Nelson'\n\n    @allure.title(\"To check google dlp can detect the Full Name in the text for name {full_name}\")\n    @pytest.mark.parametrize(\"full_name\", full_name_list)\n    def test_check_google_dlp_can_detect_full_name(full_name):\n        try:\n            response = DLPDataService.post_dlp_data_service(full_name)\n            log_response_data.from_reponse('Google_DLP_Service', response)\n            if response.status_code == 200:\n                logger.info(f'Google_DLP_Service response code is 200 and response is {response.text}')\n                # get the json response from the api\n                json_response = response.json()\n                expect(json_response['result']['findings'][0]['infoType']['name'] == \"PERSON_NAME\")\n                expect(json_response['result']['findings'][0]['likelihood'] == \"POSSIBLE\")\n>               assert_expectations()\n\ntest/test_name_info_type.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def assert_expectations():\n        'raise an assert if there are any failed expectations'\n        if _failed_expectations:\n>           assert False, _report_failures()\nE           AssertionError: \u001b[93m\nE           \nE           assert_expectations() called at\u001b[0m\nE           \u001b[4m\u001b[94m\"/home/nitin-singh/PycharmProjects/DLPTest/test/test_name_info_type.py:26\"\u001b[0m\u001b[93m in test_check_google_dlp_can_detect_full_name()\nE           \nE           \u001b[91m\u001b[4mFailed Expectations : 1\nE           \u001b[0m\nE           1: \u001b[91mFailed at \"\u001b[0m\u001b[94m\u001b[4m/home/nitin-singh/PycharmProjects/DLPTest/test/test_name_info_type.py:25\u001b[0m\u001b[91m\", in test_check_google_dlp_can_detect_full_name()\nE           \t\u001b[1m\u001b[4mErrorMessage:\u001b[0m\u001b[91m\tNone\u001b[0m\nE                       expect(json_response['result']['findings'][0]['likelihood'] == \"POSSIBLE\")\n\nvenv/lib/python3.8/site-packages/delayed_assert/delayed_assert.py:74: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nfull_name = 'Jane Nelson'\n\n    @allure.title(\"To check google dlp can detect the Full Name in the text for name {full_name}\")\n    @pytest.mark.parametrize(\"full_name\", full_name_list)\n    def test_check_google_dlp_can_detect_full_name(full_name):\n        try:\n            response = DLPDataService.post_dlp_data_service(full_name)\n            log_response_data.from_reponse('Google_DLP_Service', response)\n            if response.status_code == 200:\n                logger.info(f'Google_DLP_Service response code is 200 and response is {response.text}')\n                # get the json response from the api\n                json_response = response.json()\n                expect(json_response['result']['findings'][0]['infoType']['name'] == \"PERSON_NAME\")\n                expect(json_response['result']['findings'][0]['likelihood'] == \"POSSIBLE\")\n                assert_expectations()\n                logger.info(\n                    f\"To check google dlp can detect the Full Name in the text for name {full_name} test case is passed \")\n    \n        except Exception as e:\n            logger.error(e)\n            logger.error(\n                f\"To check google dlp can detect the Full Name in the text for name {full_name} test case is Failed \")\n    \n>           assert False, e\nE           AssertionError: AssertionError('\\x1b[93m\nE             \nE             assert_expectations() called at\\x1b[0m\nE             \\x1b[4m\\x1b[94m\"/home/nitin-singh/PycharmProjects/...\\x1b[91m\\tNone\\x1b[0m\nE                         expect(json_response[\\'result\\'][\\'findings\\'][0][\\'likelihood\\'] == \"POSSIBLE\")\nE             ')\nE           assert False\n\ntest/test_name_info_type.py:35: AssertionError"}, "steps": [{"name": "Calling Google DLP POSTS API with id: 'Jane Nelson' ", "status": "passed", "steps": [{"name": "Getting the base url for api", "status": "passed", "start": 1630873850679, "stop": 1630873850680}, {"name": "Log request Data for service 'Google DLP Service'", "status": "passed", "parameters": [{"name": "url", "value": "'https://dlp.googleapis.com/v2/projects/qe-assignment/content:inspect?key=AIzaSyBwdXHzGzCuPmlNzN2VQUl_g5ILsqBZW6g'"}, {"name": "header", "value": "{'Content-Type': 'application/json', 'charset': 'UTF-8'}"}, {"name": "service_name", "value": "'Google DLP Service'"}], "start": 1630873850680, "stop": 1630873850680}, {"name": "reading the json from file : 'DLP_Post.json' with dictionary: {'text': 'Jane Nelson'}", "status": "passed", "parameters": [{"name": "filename", "value": "'DLP_Post.json'"}, {"name": "d", "value": "{'text': 'Jane Nelson'}"}], "start": 1630873850681, "stop": 1630873850681}], "parameters": [{"name": "text", "value": "'Jane Nelson'"}], "start": 1630873850679, "stop": 1630873851251}, {"name": "Log response Data for service 'Google_DLP_Service'", "status": "passed", "parameters": [{"name": "service_name", "value": "'Google_DLP_Service'"}, {"name": "response", "value": "<Response [200]>"}], "start": 1630873851252, "stop": 1630873851256}], "attachments": [{"name": "log", "source": "ac5ecd08-cb96-4fdf-b44a-3f89a4c07f69-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "full_name", "value": "'Jane Nelson'"}], "start": 1630873850679, "stop": 1630873851267, "uuid": "99eadcd7-cf78-44e9-abb2-cffe079d341c", "historyId": "8d688932b009028d1300d81d40137142", "testCaseId": "ef45870527891eead22449a31b814770", "fullName": "test.test_name_info_type#test_check_google_dlp_can_detect_full_name", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_name_info_type"}, {"name": "host", "value": "LPBR394-NITINSINGH"}, {"name": "thread", "value": "18188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_name_info_type"}]}