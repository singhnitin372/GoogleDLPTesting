{"name": "To check google dlp can detect the First Name in the text for name Sue", "status": "failed", "statusDetails": {"message": "AssertionError: KeyError('findings')\nassert False", "trace": "first_name = 'Sue'\n\n    @allure.title(\"To check google dlp can detect the First Name in the text for name {first_name}\")\n    @pytest.mark.parametrize(\"first_name\", first_name_list)\n    def test_check_google_dlp_can_detect_first_name(first_name):\n        try:\n            response = DLPDataService.post_dlp_data_service(first_name)\n            log_response_data.from_reponse('Google_DLP_Service', response)\n            if response.status_code == 200:\n                logger.info(f'Google_DLP_Service response code is 200 and response is {response.text}')\n                # get the json response from the api\n                json_response = response.json()\n>               info_type_list, likelihood_list = response_to_list.get_data_list(json_response)\n\ntest/test_name_info_type.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\na = ({'result': {}},), kw = {}, __tracebackhide__ = True, params = OrderedDict([('reponse_json_data', \"{'result': {}}\")]), args = [\"{'result': {}}\"]\n\n    @wraps(func)\n    def impl(*a, **kw):\n        __tracebackhide__ = True\n        params = func_parameters(func, *a, **kw)\n        args = list(map(lambda x: represent(x), a))\n        with StepContext(self.title.format(*args, **params), params):\n>           return func(*a, **kw)\n\nvenv/lib/python3.8/site-packages/allure_commons/_allure.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nreponse_json_data = {'result': {}}\n\n    @allure.step('Create the Likelihood List and Info Type List from the json data {reponse_json_data}')\n    def get_data_list(reponse_json_data):\n        logger.info(f'Converting the json to Info Type List and Likelihood list from {reponse_json_data}')\n        info_type_list = []\n        likelihood_list = []\n>       for i in reponse_json_data['result']['findings']:\nE       KeyError: 'findings'\n\nutility/response_to_list.py:12: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nfirst_name = 'Sue'\n\n    @allure.title(\"To check google dlp can detect the First Name in the text for name {first_name}\")\n    @pytest.mark.parametrize(\"first_name\", first_name_list)\n    def test_check_google_dlp_can_detect_first_name(first_name):\n        try:\n            response = DLPDataService.post_dlp_data_service(first_name)\n            log_response_data.from_reponse('Google_DLP_Service', response)\n            if response.status_code == 200:\n                logger.info(f'Google_DLP_Service response code is 200 and response is {response.text}')\n                # get the json response from the api\n                json_response = response.json()\n                info_type_list, likelihood_list = response_to_list.get_data_list(json_response)\n                expect(\"PERSON_NAME\" in info_type_list)\n                expect(\"POSSIBLE\" in likelihood_list)\n                assert_expectations()\n                logger.info(\n                    f\"To check google dlp can detect the first Name in the text for name {first_name} test case is passed \")\n    \n        except Exception as e:\n            logger.error(e)\n            logger.error(\n                f\"To check google dlp can detect the first Name in the text for name {first_name} test case is Failed \")\n    \n>           assert False, e\nE           AssertionError: KeyError('findings')\nE           assert False\n\ntest/test_name_info_type.py:84: AssertionError"}, "steps": [{"name": "Calling Google DLP POSTS API with id: 'Sue' ", "status": "passed", "steps": [{"name": "Getting the base url for api", "status": "passed", "start": 1630873934429, "stop": 1630873934429}, {"name": "Log request Data for service 'Google DLP Service'", "status": "passed", "parameters": [{"name": "url", "value": "'https://dlp.googleapis.com/v2/projects/qe-assignment/content:inspect?key=AIzaSyBwdXHzGzCuPmlNzN2VQUl_g5ILsqBZW6g'"}, {"name": "header", "value": "{'Content-Type': 'application/json', 'charset': 'UTF-8'}"}, {"name": "service_name", "value": "'Google DLP Service'"}], "start": 1630873934430, "stop": 1630873934430}, {"name": "reading the json from file : 'DLP_Post.json' with dictionary: {'text': 'Sue'}", "status": "passed", "parameters": [{"name": "filename", "value": "'DLP_Post.json'"}, {"name": "d", "value": "{'text': 'Sue'}"}], "start": 1630873934430, "stop": 1630873934431}], "parameters": [{"name": "text", "value": "'Sue'"}], "start": 1630873934429, "stop": 1630873934611}, {"name": "Log response Data for service 'Google_DLP_Service'", "status": "passed", "parameters": [{"name": "service_name", "value": "'Google_DLP_Service'"}, {"name": "response", "value": "<Response [200]>"}], "start": 1630873934612, "stop": 1630873934616}, {"name": "Create the Likelihood List and Info Type List from the json data {'result': {}}", "status": "broken", "statusDetails": {"message": "KeyError: 'findings'\n", "trace": "  File \"/home/nitin-singh/PycharmProjects/DLPTest/venv/lib/python3.8/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/nitin-singh/PycharmProjects/DLPTest/utility/response_to_list.py\", line 12, in get_data_list\n    for i in reponse_json_data['result']['findings']:\n"}, "parameters": [{"name": "reponse_json_data", "value": "{'result': {}}"}], "start": 1630873934617, "stop": 1630873934618}], "attachments": [{"name": "log", "source": "f510472d-0e87-47de-ac15-cd30e93e26f9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "first_name", "value": "'Sue'"}], "start": 1630873934428, "stop": 1630873934620, "uuid": "f3e1f694-0502-4b22-90b2-de61947bc9f9", "historyId": "d68d2bb2a65d6ff4e18a074feb2fc62d", "testCaseId": "49a5b0182380228cdc00fa3c6994703a", "fullName": "test.test_name_info_type#test_check_google_dlp_can_detect_first_name", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_name_info_type"}, {"name": "host", "value": "LPBR394-NITINSINGH"}, {"name": "thread", "value": "18188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_name_info_type"}]}